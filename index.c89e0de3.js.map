{"mappings":"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","sources":["<anon>","src/js/search.js","src/js/renderSearch.js"],"sourcesContent":["\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7rYDH = parcelRequire(\"7rYDH\");\n\nvar $7rYDH = parcelRequire(\"7rYDH\");\n\nvar $iJbGQ = parcelRequire(\"iJbGQ\");\nclass $c419a197986ad2d6$var$RenderSearch {\n    async render(options) {\n        console.log(\"start home rendering\");\n        //  Call API to get trending movies\n        const movies = await (0, $7rYDH.default).searchMovies(options.text);\n        let searchMatchHTML = \"\";\n        //  movies.data.results\n        //  Iterate through each movie results\n        let count = 0;\n        movies.data.results.forEach((movie)=>{\n            // const movieHtml=  RenderMovieCard.render(movie);\n            searchMatchHTML = searchMatchHTML + (0, $iJbGQ.default).render(movie);\n            count++;\n        });\n        document.getElementById(\"content\").innerHTML = searchMatchHTML;\n    }\n}\nvar $c419a197986ad2d6$export$2e2bcd8739ae039 = new $c419a197986ad2d6$var$RenderSearch();\n\n\n\nvar $kDUSD = parcelRequire(\"kDUSD\");\nlet $b18fd23e9761f35d$var$searchButton = document.getElementById(\"search-button\");\n// async call for API\n//  capture the search texts\n//  call search API with search texts\n//  render the  results in the page\n$b18fd23e9761f35d$var$searchButton.onclick = async function(e) {\n    const searchField = document.getElementById(\"search-input\");\n    await (0, $c419a197986ad2d6$export$2e2bcd8739ae039).render({\n        text: searchField.value\n    });\n    $b18fd23e9761f35d$var$setupMovieCardOnClick();\n    document.getElementById(\"pagination\").innerHTML = \"\";\n};\nfunction $b18fd23e9761f35d$var$setupMovieCardOnClick() {\n    const movieCardLinks = document.getElementsByClassName(\"movie-card\");\n    for (const movieCardLink of movieCardLinks)movieCardLink.onclick = async function(ev) {\n        const movieId = ev.currentTarget.getAttribute(\"data-movie-id\");\n        //  call movie api to get details of movieId\n        const response = await (0, $7rYDH.default).getMovieDetails(movieId);\n        // console.log(response);\n        //  pass the response of the movie details api to RenderMovieDetails\n        (0, $kDUSD.default).render(response.data);\n        let addToWatchedBtn = document.getElementById(\"add-to-watched-btn\");\n        let addToQueueBtn = document.getElementById(\"add-to-q-btn\");\n        addToWatchedBtn.onclick = function(e) {\n            // get item if it exists in localStorage\n            let watchedMoviesText = localStorage.getItem(\"watchedMovies\");\n            let watchedMovies = [];\n            if (watchedMoviesText) watchedMovies = JSON.parse(watchedMoviesText);\n            let movieInfo = {\n                id: response.data.id,\n                poster_path: response.data.poster_path,\n                original_title: response.data.original_title,\n                vote_average: response.data.vote_average,\n                genre_ids: response.data.genres.map((g)=>g.id),\n                release_date: response.data.release_date\n            };\n            watchedMovies.push(movieInfo);\n            localStorage.setItem(\"watchedMovies\", JSON.stringify(watchedMovies));\n            console.log(watchedMovies);\n        };\n        addToQueueBtn.onclick = function(e) {\n            let queuedMoviesText = localStorage.getItem(\"queuedMovies\");\n            let queuedMovies = [];\n            if (queuedMoviesText) queuedMovies = JSON.parse(queuedMoviesText);\n            let movieInfo = {\n                id: response.data.id,\n                poster_path: response.data.poster_path,\n                original_title: response.data.original_title,\n                vote_average: response.data.vote_average,\n                genre_ids: response.data.genres.map((g)=>g.id),\n                release_date: response.data.release_date\n            };\n            queuedMovies.push(movieInfo);\n            localStorage.setItem(\"queuedMovies\", JSON.stringify(queuedMovies));\n        };\n    };\n}\n\n\n//# sourceMappingURL=index.c89e0de3.js.map\n","import MovieDbApi from './api';\r\nimport renderSearch from './renderSearch';\r\nimport renderMovieDetails from './renderMovieDetails';\r\n\r\nlet searchButton = document.getElementById('search-button');\r\n// async call for API\r\n\r\n\r\n//  capture the search texts\r\n//  call search API with search texts\r\n//  render the  results in the page\r\nsearchButton.onclick = async function (e) {\r\n    const searchField = document.getElementById('search-input');\r\n    await renderSearch.render({text: searchField.value});\r\n    setupMovieCardOnClick();\r\n    document.getElementById('pagination').innerHTML = '';\r\n}\r\n\r\nfunction setupMovieCardOnClick() {\r\n    const movieCardLinks = document.getElementsByClassName(\"movie-card\");\r\n    for (const movieCardLink of movieCardLinks) {\r\n      movieCardLink.onclick = async function (ev) {\r\n        const movieId = ev.currentTarget.getAttribute(\"data-movie-id\");\r\n        //  call movie api to get details of movieId\r\n        const response = await MovieDbApi.getMovieDetails(movieId);\r\n        // console.log(response);\r\n        //  pass the response of the movie details api to RenderMovieDetails\r\n        renderMovieDetails.render(response.data);\r\n\r\n        let addToWatchedBtn = document.getElementById('add-to-watched-btn');\r\n        let addToQueueBtn = document.getElementById('add-to-q-btn');\r\n        addToWatchedBtn.onclick = function (e) {\r\n\r\n          // get item if it exists in localStorage\r\n          let watchedMoviesText = localStorage.getItem(\"watchedMovies\");\r\n          let watchedMovies = [];\r\n          if (watchedMoviesText) {\r\n            watchedMovies = JSON.parse(watchedMoviesText);\r\n          }\r\n\r\n          let movieInfo = {\r\n            id: response.data.id,\r\n            poster_path: response.data.poster_path,\r\n            original_title: response.data.original_title,\r\n            vote_average: response.data.vote_average,\r\n            genre_ids: response.data.genres.map(g => g.id),\r\n            release_date: response.data.release_date\r\n\r\n          }\r\n\r\n          watchedMovies.push(movieInfo);\r\n\r\n          localStorage.setItem('watchedMovies', JSON.stringify(watchedMovies));\r\n          console.log(watchedMovies);\r\n        }\r\n\r\n\r\n\r\n        addToQueueBtn.onclick = function (e) {\r\n\r\n          let queuedMoviesText = localStorage.getItem(\"queuedMovies\");\r\n          let queuedMovies = [];\r\n          if (queuedMoviesText) {\r\n            queuedMovies = JSON.parse(queuedMoviesText);\r\n          }\r\n          let movieInfo = {\r\n            id: response.data.id,\r\n            poster_path: response.data.poster_path,\r\n            original_title: response.data.original_title,\r\n            vote_average: response.data.vote_average,\r\n            genre_ids: response.data.genres.map(g => g.id),\r\n            release_date: response.data.release_date\r\n\r\n          }\r\n\r\n          queuedMovies.push(movieInfo);\r\n\r\n          localStorage.setItem('queuedMovies', JSON.stringify(queuedMovies));\r\n        }\r\n    };\r\n    }\r\n}\r\n\r\n\r\n\r\n","\r\nimport MovieDbApi from './api';\r\n\r\nimport renderMovieCard from './renderMovieCard';\r\n\r\nclass RenderSearch {\r\n\r\n    async render(options) {\r\n        console.log('start home rendering');\r\n        //  Call API to get trending movies\r\n        const movies = await MovieDbApi.searchMovies(options.text);\r\n        let searchMatchHTML = '';\r\n        //  movies.data.results\r\n        //  Iterate through each movie results\r\n        let count = 0;\r\n        movies.data.results.forEach((movie) => {\r\n            // const movieHtml=  RenderMovieCard.render(movie);\r\n            \r\n            searchMatchHTML = searchMatchHTML + renderMovieCard.render(movie);\r\n            count++;\r\n        });\r\n        document.getElementById('content').innerHTML = searchMatchHTML;\r\n    }\r\n}\r\n\r\nexport default new RenderSearch();"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7rYDH","$iJbGQ","$c419a197986ad2d6$export$2e2bcd8739ae039","render","options","console","log","movies","default","searchMovies","text","searchMatchHTML","count","data","results","forEach","movie","document","getElementById","innerHTML","$kDUSD","$b18fd23e9761f35d$var$searchButton","onclick","e","searchField","value","$b18fd23e9761f35d$var$setupMovieCardOnClick","movieCardLink","getElementsByClassName","ev","movieId","currentTarget","getAttribute","response","getMovieDetails","addToWatchedBtn","addToQueueBtn","watchedMoviesText","localStorage","getItem","watchedMovies","JSON","parse","movieInfo","poster_path","original_title","vote_average","genre_ids","genres","map","g","release_date","push","setItem","stringify","queuedMoviesText","queuedMovies"],"version":3,"file":"index.c89e0de3.js.map"}